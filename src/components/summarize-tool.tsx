'use client';

import { useState } from 'react';
import { summarizeArticle } from '@/ai/flows/summarize-news-articles';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { BrainCircuit, Loader2, Sparkles } from 'lucide-react';

type SummarizeToolProps = {
  articleContent: string;
};

export default function SummarizeTool({ articleContent }: SummarizeToolProps) {
  const [summary, setSummary] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const handleSummarize = async () => {
    setIsLoading(true);
    setError('');
    setSummary('');
    setIsDialogOpen(true);

    try {
      const result = await summarizeArticle({ articleContent });
      if (result.summary) {
        setSummary(result.summary);
      } else {
        setError('Could not generate a summary.');
      }
    } catch (e) {
      console.error(e);
      setError('An error occurred while summarizing the article.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <Button onClick={handleSummarize} className="bg-accent text-accent-foreground hover:bg-accent/90" disabled={isLoading}>
        {isLoading ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Summarizing...
          </>
        ) : (
          <>
            <BrainCircuit className="mr-2 h-4 w-4" />
            Summarize with AI
          </>
        )}
      </Button>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="flex items-center font-headline text-2xl">
              <Sparkles className="mr-2 h-6 w-6 text-primary" />
              AI Summary
            </DialogTitle>
             <DialogDescription>
              A quick summary of the article, generated by AI.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            {isLoading && (
              <div className="flex items-center justify-center p-8">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
              </div>
            )}
            {error && (
              <Alert variant="destructive">
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            {summary && (
              <p className="text-base leading-relaxed font-body">{summary}</p>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
